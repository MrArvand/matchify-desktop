name: Release Windows Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'  # Matches your local Flutter version exactly
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build Windows executable
        run: |
          echo "Starting Flutter Windows build..."
          flutter build windows --release
          echo "Flutter build completed"
          
          # Check if build was successful
          if (Test-Path "build\windows\x64\runner\Release") {
            echo "‚úÖ Build successful - Release directory exists"
            echo "Build contents:"
            Get-ChildItem "build\windows\x64\runner\Release" | Select-Object Name, Length
          } else {
            echo "‚ùå Build failed - Release directory not found"
            echo "Available build directories:"
            if (Test-Path "build") {
              Get-ChildItem "build" -Recurse -Directory | Select-Object FullName
            } else {
              echo "No build directory found at all"
            }
            exit 1
          }
        
      - name: List build directory contents
        run: |
          echo "Checking build directory structure..."
          if (Test-Path "build\windows\x64\runner\Release") {
            echo "Release directory exists"
            Get-ChildItem "build\windows\x64\runner\Release" -Recurse | Select-Object Name, Length, FullName
          } else {
            echo "Release directory does not exist"
            echo "Available directories:"
            Get-ChildItem "build" -Recurse -Directory | Select-Object FullName
          }
        
      - name: Prepare Inno Setup script
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}"
          echo "Preparing Inno Setup script for version: $version"
          
          # Create scripts directory if it doesn't exist
          if (!(Test-Path "scripts")) {
            New-Item -ItemType Directory -Path "scripts" -Force
          }
          
          # Create the prepare script inline
          $prepareScript = @'
          param(
              [Parameter(Mandatory=$true)]
              [string]$Version
          )
          
          Write-Host "Preparing Inno Setup script for version: $Version"
          
          # Remove 'v' prefix if present
          $cleanVersion = $Version -replace "^v", ""
          
          # Read the template Inno Setup script
          $templatePath = "setup.iss"
          $templateContent = Get-Content -Path $templatePath -Raw -Encoding UTF8
          
          # Replace the version placeholder
          $updatedContent = $templateContent -replace "\{#AppVersion\}", $cleanVersion
          
          # Write the updated script
          $outputPath = "setup-prepared.iss"
          $updatedContent | Out-File -FilePath $outputPath -Encoding UTF8
          
          Write-Host "Inno Setup script prepared: $outputPath"
          Write-Host "Version set to: $cleanVersion"
          
          # Verify the file was created
          if (Test-Path $outputPath) {
              $fileSize = (Get-Item $outputPath).Length
              Write-Host "File created successfully. Size: $fileSize bytes"
          } else {
              Write-Error "Failed to create prepared Inno Setup script"
              exit 1
          }
          '@
          
          $prepareScript | Out-File -FilePath "scripts\prepare-inno-setup.ps1" -Encoding UTF8
          
          # Run the prepare script
          & "scripts\prepare-inno-setup.ps1" -Version $version
          
          # Verify the prepared script exists
          if (Test-Path "setup-prepared.iss") {
            echo "‚úÖ Inno Setup script prepared successfully"
            echo "Prepared script contents (first 10 lines):"
            Get-Content "setup-prepared.iss" | Select-Object -First 10
            
            # Also check for any problematic lines
            echo "üîç Checking for potential issues in prepared script..."
            $content = Get-Content "setup-prepared.iss"
            $lineNumber = 0
            foreach ($line in $content) {
              $lineNumber++
              if ($line -match "WizardImageFile|WizardSmallImageFile|SetupIconFile") {
                echo "‚ö†Ô∏è  Line $lineNumber contains image reference: $line"
              }
            }
          } else {
            echo "‚ùå Failed to prepare Inno Setup script"
            exit 1
          }
        
      - name: Debug Inno Setup Script
        shell: pwsh
        run: |
          echo "üîç Debugging Inno Setup script..."
          if (Test-Path "setup-prepared.iss") {
            echo "‚úÖ setup-prepared.iss exists"
            echo "File size: $((Get-Item 'setup-prepared.iss').Length) bytes"
            echo "First 20 lines:"
            Get-Content "setup-prepared.iss" | Select-Object -First 20 | ForEach-Object { echo "  $_" }
            
            # Check for any syntax issues
            echo "`nüîç Checking for potential syntax issues..."
            $content = Get-Content "setup-prepared.iss" -Raw
            if ($content -match "WizardImageFile|WizardSmallImageFile|SetupIconFile") {
              echo "‚ö†Ô∏è  Found image file references that might cause issues:"
              $content -split "`n" | ForEach-Object { 
                if ($_ -match "WizardImageFile|WizardSmallImageFile|SetupIconFile") {
                  echo "  $_"
                }
              }
            }
            
            # Check for any lines starting with # that might cause preprocessor issues
            echo "`nüîç Checking for potential preprocessor issues..."
            $content = Get-Content "setup-prepared.iss"
            $lineNumber = 0
            foreach ($line in $content) {
              $lineNumber++
              if ($line.Trim() -match "^#") {
                echo "‚ö†Ô∏è  Line $lineNumber starts with # (potential preprocessor issue): $line"
              }
            }
          } else {
            echo "‚ùå setup-prepared.iss not found"
          }
          
          echo "`nüîç Checking build directory..."
          if (Test-Path "build\windows\x64\runner\Release") {
            echo "‚úÖ Build directory exists"
            $buildFiles = Get-ChildItem "build\windows\x64\runner\Release" | Select-Object Name, Length
            echo "Build files:"
            $buildFiles | ForEach-Object { echo "  $($_.Name) - $($_.Length) bytes" }
          } else {
            echo "‚ùå Build directory does not exist"
            echo "Available directories:"
            Get-ChildItem "build" -Recurse -Directory | Select-Object FullName
          }
      
      - name: Prepare Output Directory
        shell: pwsh
        run: |
          echo "üìÅ Preparing output directory..."
          if (!(Test-Path "output")) {
            New-Item -ItemType Directory -Path "output" -Force
            echo "‚úÖ Created output directory"
          } else {
            echo "‚úÖ Output directory already exists"
          }
          
          # List contents
          echo "üìÇ Output directory contents:"
          Get-ChildItem "output" | Select-Object Name, Length, LastWriteTime
      
      - name: Compile Inno Setup Installer
        id: compile-main
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.6
        with:
          path: setup-prepared.iss
          options: /O+
      
      - name: Prepare Minimal Inno Setup Script (Fallback)
        if: steps.compile-main.outcome == 'failure'
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}"
          echo "Preparing minimal Inno Setup script for version: $version (fallback)"
          
          # Remove 'v' prefix if present
          $cleanVersion = $version -replace "^v", ""
          
          # Read the minimal template
          $templatePath = "setup-minimal.iss"
          $templateContent = Get-Content -Path $templatePath -Raw -Encoding UTF8
          
          # Replace the version placeholder
          $updatedContent = $templateContent -replace "\{#AppVersion\}", $cleanVersion
          
          # Write the updated script
          $outputPath = "setup-minimal-prepared.iss"
          $updatedContent | Out-File -FilePath $outputPath -Encoding UTF8
          
          echo "‚úÖ Minimal Inno Setup script prepared: $outputPath"
          echo "Version set to: $cleanVersion"
      
      - name: Compile Inno Setup Installer (Fallback)
        if: steps.compile-main.outcome == 'failure'
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.6
        with:
          path: setup-minimal-prepared.iss
          options: /O+
      
      - name: Check Compilation Results
        shell: pwsh
        run: |
          echo "üîç Checking Inno Setup compilation results..."
          
          # Check if any installer was created
          $installerName = "matchify-desktop-setup-${{ github.ref_name }}.exe"
          $installerPath = "output\$installerName"
          
          if (Test-Path $installerPath) {
            $installerSize = (Get-Item $installerPath).Length
            echo "‚úÖ Main compilation succeeded: $installerName"
            echo "üìÅ Installer size: $([math]::Round($installerSize / 1MB, 2)) MB"
          } else {
            echo "‚ùå Main compilation failed - installer not found"
            
            # Check if fallback compilation succeeded
            if (Test-Path "setup-minimal-prepared.iss") {
              echo "üîÑ Fallback script was prepared, checking if compilation succeeded..."
              
              # Look for any .exe files in output
              if (Test-Path "output") {
                $outputFiles = Get-ChildItem "output" | Where-Object { $_.Name -like "*.exe" }
                if ($outputFiles) {
                  echo "‚úÖ Fallback compilation succeeded:"
                  $outputFiles | ForEach-Object { 
                    echo "  $($_.Name) - $([math]::Round($_.Length / 1MB, 2)) MB"
                  }
                } else {
                  echo "‚ùå Fallback compilation also failed - no .exe files found"
                }
              } else {
                echo "‚ùå Output directory doesn't exist after fallback compilation"
              }
            } else {
              echo "‚ùå Fallback script was not prepared"
            }
          }
          
          # If we get here and no installer was created, this step should fail
          if (!(Test-Path $installerPath)) {
            echo "‚ùå No installer was created by either compilation attempt"
            exit 1
          }
      
      - name: Verify Inno Setup output
        run: |
          echo "Checking Inno Setup compilation output..."
          
          # Look for the generated installer
          $installerName = "matchify-desktop-setup-${{ github.ref_name }}.exe"
          $installerPath = "output\$installerName"
          
          if (Test-Path $installerPath) {
            $installerSize = (Get-Item $installerPath).Length
            echo "‚úÖ Installer created successfully: $installerName"
            echo "üìÅ Installer size: $([math]::Round($installerSize / 1MB, 2)) MB"
            echo "üìç Installer path: $installerPath"
          } else {
            echo "‚ùå Installer not found at expected path: $installerPath"
            echo "üìÇ Checking output directory contents:"
            if (Test-Path "output") {
              Get-ChildItem "output" | Select-Object Name, Length, LastWriteTime
            } else {
              echo "Output directory does not exist"
            }
            
            # Try to find any installer that might have been created
            echo "üîç Searching for any installer files..."
            $allFiles = Get-ChildItem -Recurse | Where-Object { $_.Name -like "*.exe" }
            if ($allFiles) {
              echo "Found executable files:"
              $allFiles | Select-Object Name, Length, FullName
            } else {
              echo "No executable files found"
            }
            
            exit 1
          }
          
          # List all files in output directory
          echo "üìÇ All files in output directory:"
          if (Test-Path "output") {
            Get-ChildItem "output" -Recurse | Select-Object Name, Length, FullName
          }
        
      - name: Create release archive (optional backup)
        run: |
          $version = "${{ github.ref_name }}"
          $version = $version -replace "v", ""
          
          # Create a backup ZIP for users who prefer it
          if (Test-Path "build\windows\x64\runner\Release") {
            echo "Creating backup ZIP archive for version: $version"
            $zipName = "matchify-desktop-windows-$version-backup.zip"
            Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath $zipName -Force
            echo "Backup ZIP created: $zipName"
            
            if (Test-Path $zipName) {
              $zipSize = (Get-Item $zipName).Length
              echo "Backup ZIP size: $([math]::Round($zipSize / 1MB, 2)) MB"
            }
          }
          
      - name: Verify final release files
        run: |
          $version = "${{ github.ref_name }}"
          $version = $version -replace "v", ""
          
          echo "Verifying final release files for version: $version"
          
          # Check installer
          $installerName = "matchify-desktop-setup-$version.exe"
          $installerPath = "output\$installerName"
          
          if (Test-Path $installerPath) {
            $installerSize = (Get-Item $installerPath).Length
            echo "‚úÖ Main installer: $installerName"
            echo "üìÅ Size: $([math]::Round($installerSize / 1MB, 2)) MB"
          } else {
            echo "‚ùå Main installer not found: $installerPath"
          }
          
          # Check backup ZIP
          $zipName = "matchify-desktop-windows-$version-backup.zip"
          if (Test-Path $zipName) {
            $zipSize = (Get-Item $zipName).Length
            echo "‚úÖ Backup ZIP: $zipName"
            echo "üìÅ Size: $([math]::Round($zipSize / 1MB, 2)) MB"
          }
          
          # List all available files
          echo "üìÇ All available release files:"
          Get-ChildItem | Where-Object { $_.Name -like "*$version*" } | Select-Object Name, Length, LastWriteTime
          if (Test-Path "output") {
            echo "üìÇ Files in output directory:"
            Get-ChildItem "output" | Select-Object Name, Length, LastWriteTime
          }
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            output/matchify-desktop-setup-${{ github.ref_name }}.exe
            matchify-desktop-windows-${{ github.ref_name }}-backup.zip
          body: |
            ## ŸÜÿ≥ÿÆŸá ${{ github.ref_name }}
            
            ### ÿ™ÿ∫€å€åÿ±ÿßÿ™:
            - ÿ®Ÿáÿ®ŸàÿØ ÿπŸÖŸÑ⁄©ÿ±ÿØ ÿ≥€åÿ≥ÿ™ŸÖ ÿ™ÿ∑ÿ®€åŸÇ
            - ÿ±ŸÅÿπ ŸÖÿ¥⁄©ŸÑÿßÿ™ ⁄Øÿ≤ÿßÿ±ÿ¥‚Äå⁄Ø€åÿ±€å
            - ÿ®Ÿáÿ®ŸàÿØ ÿ±ÿßÿ®ÿ∑ ⁄©ÿßÿ±ÿ®ÿ±€å
            - ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØŸÜ ÿ≥€åÿ≥ÿ™ŸÖ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿÆŸàÿØ⁄©ÿßÿ±
            - **ŸÜÿµÿ®‚Äå⁄©ŸÜŸÜÿØŸá ÿ≠ÿ±ŸÅŸá‚Äåÿß€å Inno Setup** üéâ
            
            ### ÿØÿßŸÜŸÑŸàÿØ:
            **ŸÜÿµÿ®‚Äå⁄©ŸÜŸÜÿØŸá ÿßÿµŸÑ€å (ÿ™Ÿàÿµ€åŸá ÿ¥ÿØŸá):**
            ŸÅÿß€åŸÑ `matchify-desktop-setup-${{ github.ref_name }}.exe` - ŸÜÿµÿ®‚Äå⁄©ŸÜŸÜÿØŸá ÿ≠ÿ±ŸÅŸá‚Äåÿß€å ÿ®ÿß ÿ±ÿßÿ®ÿ∑ ⁄©ÿßÿ±ÿ®ÿ±€å ÿ≤€åÿ®ÿß
            
            **ŸÜÿ≥ÿÆŸá Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ:**
            ŸÅÿß€åŸÑ `matchify-desktop-windows-${{ github.ref_name }}-backup.zip` - ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ€å ⁄©Ÿá ÿ™ÿ±ÿ¨€åÿ≠ ŸÖ€å‚ÄåÿØŸáŸÜÿØ ÿßÿ≤ ZIP ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜŸÜÿØ
            
            ### ŸÜÿµÿ®:
            **ÿ®ÿß ŸÜÿµÿ®‚Äå⁄©ŸÜŸÜÿØŸá Inno Setup (ÿ™Ÿàÿµ€åŸá ÿ¥ÿØŸá):**
            1. ŸÅÿß€åŸÑ `matchify-desktop-setup-${{ github.ref_name }}.exe` ÿ±ÿß ÿØÿßŸÜŸÑŸàÿØ ⁄©ŸÜ€åÿØ
            2. ŸÅÿß€åŸÑ ÿ±ÿß ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ Ÿà ŸÖÿ±ÿßÿ≠ŸÑ ŸÜÿµÿ® ÿ±ÿß ÿØŸÜÿ®ÿßŸÑ ⁄©ŸÜ€åÿØ
            3. ŸÜÿµÿ®‚Äå⁄©ŸÜŸÜÿØŸá ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿÆŸàÿØ⁄©ÿßÿ± ŸÖ€åÿßŸÜÿ®ÿ±Ÿáÿß ÿ±ÿß ÿß€åÿ¨ÿßÿØ ŸÖ€å‚Äå⁄©ŸÜÿØ
            
            **ÿ®ÿß ŸÅÿß€åŸÑ ZIP:**
            1. ŸÅÿß€åŸÑ ZIP ÿ±ÿß ÿØÿßŸÜŸÑŸàÿØ ⁄©ŸÜ€åÿØ
            2. ŸÖÿ≠ÿ™Ÿà€åÿßÿ™ ÿ±ÿß ÿØÿ± ŸæŸàÿ¥Ÿá‚Äåÿß€å ŸÖŸÜÿßÿ≥ÿ® ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ⁄©ŸÜ€åÿØ
            3. ŸÅÿß€åŸÑ `matchify_desktop.exe` ÿ±ÿß ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ
            
            ### ŸÖÿ≤ÿß€åÿß€å ŸÜÿµÿ®‚Äå⁄©ŸÜŸÜÿØŸá Inno Setup:
            ‚úÖ ŸÜÿµÿ® ÿ≠ÿ±ŸÅŸá‚Äåÿß€å ÿ®ÿß ÿ±ÿßÿ®ÿ∑ ⁄©ÿßÿ±ÿ®ÿ±€å ÿ≤€åÿ®ÿß
            ‚úÖ ÿß€åÿ¨ÿßÿØ ŸÖ€åÿßŸÜÿ®ÿ± ÿØÿ± ŸÖŸÜŸà€å Start Ÿà Desktop
            ‚úÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿßÿ≤ Uninstaller
            ‚úÖ ŸÜÿµÿ® ÿÆŸàÿØ⁄©ÿßÿ± Ÿà ÿ®ÿØŸàŸÜ ŸÜ€åÿßÿ≤ ÿ®Ÿá ÿ™ÿπÿßŸÖŸÑ ⁄©ÿßÿ±ÿ®ÿ±
            ‚úÖ ŸÖÿØ€åÿ±€åÿ™ ÿ®Ÿáÿ™ÿ± ŸÅÿß€åŸÑ‚ÄåŸáÿß Ÿà ŸæŸàÿ¥Ÿá‚ÄåŸáÿß
            ‚úÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿßÿ≤ ÿ≤ÿ®ÿßŸÜ ŸÅÿßÿ±ÿ≥€å
            
            ### ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿÆŸàÿØ⁄©ÿßÿ±:
            ÿß€åŸÜ ŸÜÿ≥ÿÆŸá ÿßÿ≤ ÿ≥€åÿ≥ÿ™ŸÖ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿÆŸàÿØ⁄©ÿßÿ± Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ŸÖ€å‚Äå⁄©ŸÜÿØ.
            ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ŸÖ€å‚Äåÿ™ŸàÿßŸÜŸÜÿØ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å‚ÄåŸáÿß ÿ±ÿß ŸÖÿ≥ÿ™ŸÇ€åŸÖÿßŸã ÿßÿ≤ ÿØÿßÿÆŸÑ ÿ®ÿ±ŸÜÿßŸÖŸá ÿØÿ±€åÿßŸÅÿ™ ⁄©ŸÜŸÜÿØ.
          draft: false
          prerelease: false
