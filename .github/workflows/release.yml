name: Release Windows Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'  # Matches your local Flutter version exactly
          channel: 'stable'

      - name: Sync pubspec version with tag
        shell: pwsh
        run: |
          $ref = "${{ github.ref_name }}"
          $clean = $ref -replace '^v',''
          Write-Host "Setting pubspec.yaml version to $clean+1"
          $path = "pubspec.yaml"
          $content = Get-Content $path -Raw
          $newContent = $content -replace "(?m)^version:\s*.*$", "version: $clean+1"
          Set-Content -Path $path -Value $newContent -Encoding UTF8
          Write-Host "pubspec.yaml version updated"
          Write-Host "Current version line:" (Select-String -Path $path -Pattern "^version:")
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build Windows executable
        run: |
          echo "Starting Flutter Windows build..."
          flutter build windows --release
          echo "Flutter build completed"
          
          # Check if build was successful
          if (Test-Path "build\windows\x64\runner\Release") {
            echo "✅ Build successful - Release directory exists"
            echo "Build contents:"
            Get-ChildItem "build\windows\x64\runner\Release" | Select-Object Name, Length
          } else {
            echo "❌ Build failed - Release directory not found"
            echo "Available build directories:"
            if (Test-Path "build") {
              Get-ChildItem "build" -Recurse -Directory | Select-Object FullName
            } else {
              echo "No build directory found at all"
            }
            exit 1
          }
        
      - name: List build directory contents
        run: |
          echo "Checking build directory structure..."
          if (Test-Path "build\windows\x64\runner\Release") {
            echo "Release directory exists"
            Get-ChildItem "build\windows\x64\runner\Release" -Recurse | Select-Object Name, Length, FullName
          } else {
            echo "Release directory does not exist"
            echo "Available directories:"
            Get-ChildItem "build" -Recurse -Directory | Select-Object FullName
          }
        
      - name: Derive version
        id: version
        shell: pwsh
        run: |
          $ref = "${{ github.ref_name }}"
          $clean = $ref -replace '^v',''
          echo "clean=$clean" >> $env:GITHUB_OUTPUT
          echo "ref=$ref"   >> $env:GITHUB_OUTPUT

      - name: Compile Inno Setup Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.6
        with:
          path: setup.iss
          options: /DAppVersion=${{ steps.version.outputs.clean }}

      - name: Verify Inno Setup output
        run: |
          echo "Checking Inno Setup compilation output..."
          
          # Look for the generated installer
          $installerName = "matchify-desktop-setup-${{ github.ref_name }}.exe"
          $installerPath = "output\$installerName"
          
          if (Test-Path $installerPath) {
            $installerSize = (Get-Item $installerPath).Length
            echo "✅ Installer created successfully: $installerName"
            echo "📁 Installer size: $([math]::Round($installerSize / 1MB, 2)) MB"
            echo "📍 Installer path: $installerPath"
          } else {
            echo "❌ Installer not found at expected path: $installerPath"
            echo "📂 Checking output directory contents:"
            if (Test-Path "output") {
              Get-ChildItem "output" | Select-Object Name, Length, LastWriteTime
            } else {
              echo "Output directory does not exist"
            }
            exit 1
          }
      
      - name: Verify Inno Setup output
        run: |
          echo "Checking Inno Setup compilation output..."
          
          # Look for the generated installer
          $installerName = "matchify-desktop-setup-${{ github.ref_name }}.exe"
          $installerPath = "output\$installerName"
          
          if (Test-Path $installerPath) {
            $installerSize = (Get-Item $installerPath).Length
            echo "✅ Installer created successfully: $installerName"
            echo "📁 Installer size: $([math]::Round($installerSize / 1MB, 2)) MB"
            echo "📍 Installer path: $installerPath"
          } else {
            echo "❌ Installer not found at expected path: $installerPath"
            echo "📂 Checking output directory contents:"
            if (Test-Path "output") {
              Get-ChildItem "output" | Select-Object Name, Length, LastWriteTime
            } else {
              echo "Output directory does not exist"
            }
            
            # Try to find any installer that might have been created
            echo "🔍 Searching for any installer files..."
            $allFiles = Get-ChildItem -Recurse | Where-Object { $_.Name -like "*.exe" }
            if ($allFiles) {
              echo "Found executable files:"
              $allFiles | Select-Object Name, Length, FullName
            } else {
              echo "No executable files found"
            }
            
            exit 1
          }
          
          # List all files in output directory
          echo "📂 All files in output directory:"
          if (Test-Path "output") {
            Get-ChildItem "output" -Recurse | Select-Object Name, Length, FullName
          }
        
      - name: Create release archive (optional backup)
        run: |
          $version = "${{ github.ref_name }}"
          $version = $version -replace "v", ""
          
          # Create a backup ZIP for users who prefer it
          if (Test-Path "build\windows\x64\runner\Release") {
            echo "Creating backup ZIP archive for version: $version"
            $zipName = "matchify-desktop-windows-$version-backup.zip"
            Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath $zipName -Force
            echo "Backup ZIP created: $zipName"
            
            if (Test-Path $zipName) {
              $zipSize = (Get-Item $zipName).Length
              echo "Backup ZIP size: $([math]::Round($zipSize / 1MB, 2)) MB"
            }
          }
          
      - name: Verify final release files
        run: |
          $version = "${{ github.ref_name }}"
          $version = $version -replace "v", ""
          
          echo "Verifying final release files for version: $version"
          
          # Check installer
          $installerName = "matchify-desktop-setup-$version.exe"
          $installerPath = "output\$installerName"
          
          if (Test-Path $installerPath) {
            $installerSize = (Get-Item $installerPath).Length
            echo "✅ Main installer: $installerName"
            echo "📁 Size: $([math]::Round($installerSize / 1MB, 2)) MB"
          } else {
            echo "❌ Main installer not found: $installerPath"
          }
          
          # Check backup ZIP
          $zipName = "matchify-desktop-windows-$version-backup.zip"
          if (Test-Path $zipName) {
            $zipSize = (Get-Item $zipName).Length
            echo "✅ Backup ZIP: $zipName"
            echo "📁 Size: $([math]::Round($zipSize / 1MB, 2)) MB"
          }
          
          # List all available files
          echo "📂 All available release files:"
          Get-ChildItem | Where-Object { $_.Name -like "*$version*" } | Select-Object Name, Length, LastWriteTime
          if (Test-Path "output") {
            echo "📂 Files in output directory:"
            Get-ChildItem "output" | Select-Object Name, Length, LastWriteTime
          }
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            output/matchify-desktop-setup-${{ github.ref_name }}.exe
            matchify-desktop-windows-${{ github.ref_name }}-backup.zip
          body: |
            ## نسخه ${{ github.ref_name }}
            
            ### تغییرات:
            - بهبود عملکرد سیستم تطبیق
            - رفع مشکلات گزارش‌گیری
            - بهبود رابط کاربری
            - اضافه شدن سیستم به‌روزرسانی خودکار
            - **نصب‌کننده حرفه‌ای Inno Setup** 🎉
            
            ### دانلود:
            **نصب‌کننده اصلی (توصیه شده):**
            فایل `matchify-desktop-setup-${{ github.ref_name }}.exe` - نصب‌کننده حرفه‌ای با رابط کاربری زیبا
            
            **نسخه پشتیبان:**
            فایل `matchify-desktop-windows-${{ github.ref_name }}-backup.zip` - برای کاربرانی که ترجیح می‌دهند از ZIP استفاده کنند
            
            ### نصب:
            **با نصب‌کننده Inno Setup (توصیه شده):**
            1. فایل `matchify-desktop-setup-${{ github.ref_name }}.exe` را دانلود کنید
            2. فایل را اجرا کنید و مراحل نصب را دنبال کنید
            3. نصب‌کننده به صورت خودکار میانبرها را ایجاد می‌کند
            
            **با فایل ZIP:**
            1. فایل ZIP را دانلود کنید
            2. محتویات را در پوشه‌ای مناسب استخراج کنید
            3. فایل `matchify_desktop.exe` را اجرا کنید
            
            ### مزایای نصب‌کننده Inno Setup:
            ✅ نصب حرفه‌ای با رابط کاربری زیبا
            ✅ ایجاد میانبر در منوی Start و Desktop
            ✅ پشتیبانی از Uninstaller
            ✅ نصب خودکار و بدون نیاز به تعامل کاربر
            ✅ مدیریت بهتر فایل‌ها و پوشه‌ها
            ✅ پشتیبانی از زبان فارسی
            
            ### به‌روزرسانی خودکار:
            این نسخه از سیستم به‌روزرسانی خودکار پشتیبانی می‌کند.
            کاربران می‌توانند به‌روزرسانی‌ها را مستقیماً از داخل برنامه دریافت کنند.
          draft: false
          prerelease: false
